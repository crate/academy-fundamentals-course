WEBVTT

00:00:04.640 --> 00:00:08.314
In this video, you'll see how
CrateDB's container data

00:00:08.314 --> 00:00:12.179
types, objects, and array make
CrateDB a powerful database

00:00:12.179 --> 00:00:14.840
for storing and retrieving
document data.

00:00:16.000 --> 00:00:19.983
We'll look at the different ways
that an object schema can be

00:00:19.983 --> 00:00:24.095
specified in CrateDB, touch on
how CrateDB indexes objects,

00:00:24.095 --> 00:00:26.280
and try out some example
queries.

00:00:27.920 --> 00:00:29.760
JSON documents are everywhere.

00:00:29.840 --> 00:00:32.471
It's a common way of
representing data, with many

00:00:32.471 --> 00:00:34.840
programming languages supporting
the format.

00:00:35.600 --> 00:00:38.712
Sometimes these documents have a
fixed schema, but it's not

00:00:38.712 --> 00:00:42.083
unusual for documents describing
the same sort of data to differ

00:00:42.083 --> 00:00:43.640
in their representation of it.

00:00:44.800 --> 00:00:48.775
Here we have two JSON documents
describing community areas in

00:00:48.775 --> 00:00:49.280
Chicago.

00:00:50.200 --> 00:00:54.771
The document on the right has
additional notableresident and

00:00:54.771 --> 00:00:56.320
zipcodes components.

00:00:56.400 --> 00:00:59.720
notableresident is an object,
zipcodes is an array.

00:01:00.600 --> 00:01:03.867
Sometimes we want to create and
enforce a strict schema for

00:01:03.867 --> 00:01:07.080
these documents, rejecting those
that don't conform to it.

00:01:07.720 --> 00:01:11.016
For example, here we might want
to reject the document for

00:01:11.016 --> 00:01:14.256
Norwood Park as it contains
extra data we haven't planned

00:01:14.256 --> 00:01:14.480
for.

00:01:15.120 --> 00:01:18.940
In other cases, we want the
flexibility to store and query

00:01:18.940 --> 00:01:22.047
such semi or unstructured
documents in a single

00:01:22.047 --> 00:01:22.760
collection.

00:01:24.680 --> 00:01:29.456
How do we store and query these
semi and unstructured data types

00:01:29.456 --> 00:01:31.440
in a relational type table?

00:01:32.160 --> 00:01:35.894
CrateDB has two container data
types that enable us to model

00:01:35.894 --> 00:01:38.160
this sort of data in a flexible
way.

00:01:39.160 --> 00:01:42.891
We'll begin by exploring the
object type, then briefly touch

00:01:42.891 --> 00:01:45.400
on the second container type,
the array.

00:01:47.160 --> 00:01:50.940
Let's explore the different ways
in which we can model objects

00:01:50.940 --> 00:01:54.000
with CrateDB using our
community_areas data set.

00:01:54.920 --> 00:01:59.071
Here I'm creating a table for
community areas using the

00:01:59.071 --> 00:02:03.359
areanumber as an integer primary key
and a text field to store the

00:02:03.359 --> 00:02:04.040
area name.

00:02:04.040 --> 00:02:08.320
For everything else, I'm going
to use an object named details.

00:02:08.760 --> 00:02:12.674
Inside that object, I've
described a schema containing a

00:02:12.674 --> 00:02:17.000
TEXT field for description and a
BIGINT field for population.

00:02:17.680 --> 00:02:21.432
Note that I've used the STRICT
object policy, which means that

00:02:21.432 --> 00:02:24.946
CrateDB will enforce this
schema and reject records that

00:02:24.946 --> 00:02:25.840
don't match it.

00:02:27.240 --> 00:02:33.267
We'll go ahead and create the
table, and now I'll paste in an

00:02:33.267 --> 00:02:34.920
INSERT statement.

00:02:35.840 --> 00:02:40.941
What we see here is that we're
inserting a new record into the

00:02:40.941 --> 00:02:42.480
table, the area 35.

00:02:42.480 --> 00:02:43.720
It's called Douglas.

00:02:43.880 --> 00:02:47.549
It has a description and a
population inside its details

00:02:47.549 --> 00:02:48.000
object.

00:02:48.560 --> 00:02:52.183
And you can see that that object
is expressed as a JSON literal

00:02:52.183 --> 00:02:53.800
here in the insert statement.

00:02:54.520 --> 00:02:58.326
When I execute this statement,
you'll see that again we get

00:02:58.326 --> 00:03:02.259
result OK, this object and this
record were inserted into the

00:03:02.259 --> 00:03:02.640
table.

00:03:04.160 --> 00:03:08.753
If we try again with a slightly
different version of this where

00:03:08.753 --> 00:03:12.844
here I've added a notableresident
sub object that's not

00:03:12.844 --> 00:03:14.280
in our table schema.

00:03:14.720 --> 00:03:19.053
What we should see when I click
execute is that we get a SQL

00:03:19.053 --> 00:03:23.530
error because the column notableresident
isn't allowed inside

00:03:23.530 --> 00:03:24.880
the object details.

00:03:25.480 --> 00:03:28.987
This is where CrateDB has
enforced that schema and has

00:03:28.987 --> 00:03:30.280
rejected this insert.

00:03:31.360 --> 00:03:34.954
Let's create an alternative
version of our community_areas

00:03:34.954 --> 00:03:35.320
table.

00:03:36.040 --> 00:03:40.029
This time I'm using the DYNAMIC
object policy for the details

00:03:40.029 --> 00:03:40.480
object.

00:03:40.720 --> 00:03:42.800
This is the default in CrateDB.

00:03:43.560 --> 00:03:47.157
What this means is that when
CrateDB encounters fields

00:03:47.157 --> 00:03:51.002
that are in the details object
that are not in the schema, it

00:03:51.002 --> 00:03:54.600
will add them anyway and infer
the appropriate data type.

00:03:55.800 --> 00:04:00.680
Let's create the table and now
let's paste in a community area.

00:04:01.520 --> 00:04:04.985
In this version of the Douglas
community area, I have that

00:04:04.985 --> 00:04:08.508
extra notableresident object
that was not mentioned in the

00:04:08.508 --> 00:04:08.920
schema.

00:04:09.920 --> 00:04:14.360
When we run this query, it will
run and execute without error.

00:04:15.320 --> 00:04:18.560
So let's see what the state of
the table looks like now.

00:04:18.560 --> 00:04:23.177
If we run the show CREATE
TABLE community_areas command,

00:04:23.177 --> 00:04:27.719
you'll see that there is a
schema down here and this schema

00:04:27.719 --> 00:04:32.033
now contains notableresidentobject
with field name and

00:04:32.033 --> 00:04:35.439
description that have been
inferred as TEXT.

00:04:36.280 --> 00:04:40.296
In this way, CrateDB has
accepted a dynamic object,

00:04:40.296 --> 00:04:44.758
modified the schema accordingly
and will index all of these

00:04:44.758 --> 00:04:45.800
values for us.

00:04:48.000 --> 00:04:50.600
The final policy to look at is
IGNORED.

00:04:51.240 --> 00:04:55.452
Here I'm creating a third
version of the communityareas

00:04:55.452 --> 00:04:59.960
table, and my details object is
specified as OBJECT(IGNORED).

00:05:00.960 --> 00:05:04.506
This means that CrateDB will
accept fields that are not

00:05:04.506 --> 00:05:07.680
specified in the schema, but it
won't index these.

00:05:08.200 --> 00:05:11.414
This means that we can store
objects that have different

00:05:11.414 --> 00:05:14.628
shapes inside this object, and
we'll see what that means

00:05:14.628 --> 00:05:15.079
shortly.

00:05:16.520 --> 00:05:21.676
Let's first create the table and
paste in an example record here

00:05:21.676 --> 00:05:26.594
for the community_areas, Douglas,
we have an object containing

00:05:26.594 --> 00:05:30.640
notableresident, which wasn't
part of the schema.

00:05:31.320 --> 00:05:34.680
And note that that itself has
some structure inside there.

00:05:34.680 --> 00:05:40.026
There's an address sub object,
so let's create that and that

00:05:40.026 --> 00:05:40.640
worked.

00:05:41.320 --> 00:05:45.402
Now what we're going to do is
add a second record that has a

00:05:45.402 --> 00:05:48.280
slightly different structure
from the 1st.

00:05:49.520 --> 00:05:53.537
I'm going to add a record for a
neighbourhood called Norwood

00:05:53.537 --> 00:05:54.920
Park, and here it is.

00:05:55.760 --> 00:05:59.603
In this case we also have this
notable resident object that

00:05:59.603 --> 00:06:03.318
wasn't part of our object
schema, but now inside that the

00:06:03.318 --> 00:06:04.600
address is a string.

00:06:04.600 --> 00:06:07.776
It's no longer another object
like it was in the previous

00:06:07.776 --> 00:06:08.160
record.

00:06:09.280 --> 00:06:13.825
We execute this, CrateDB stores
that, and what's happened here

00:06:13.825 --> 00:06:18.299
is that the notableresident subobject
and anything inside it

00:06:18.299 --> 00:06:21.991
has been stored and can be
queried, but hasn't been

00:06:21.991 --> 00:06:22.559
indexed.

00:06:24.320 --> 00:06:29.439
This means that when we run a
query such as this one, you can

00:06:29.439 --> 00:06:34.640
see that we get back different
versions of the address because

00:06:34.640 --> 00:06:39.760
each record that we inserted had
a different data type there.

00:06:40.160 --> 00:06:44.480
In one case it was a string, in
the other case it's an object.

00:06:49.480 --> 00:06:53.040
The other container data type in
CrateDB is an array.

00:06:53.760 --> 00:06:58.160
This is a container for other
data types, including objects.

00:06:58.880 --> 00:07:02.458
Here I'm creating another
version of the community_areas

00:07:02.458 --> 00:07:06.225
table, and inside my details
object I've chosen to model an

00:07:06.225 --> 00:07:07.920
array of zip codes as text.

00:07:09.400 --> 00:07:14.280
Let's create the table and let's
look at an example record.

00:07:15.080 --> 00:07:19.144
Here I'm inserting a record for
Norwood Park which now has an

00:07:19.144 --> 00:07:22.160
array of zip codes containing 3
text strings.

00:07:23.160 --> 00:07:24.120
Let's create that.

00:07:25.400 --> 00:07:27.600
Now how do we query these?

00:07:28.880 --> 00:07:33.718
If we take a look at this SELECT
query here, what we see is that

00:07:33.718 --> 00:07:37.440
there is a Python like syntax
for slicing arrays.

00:07:38.320 --> 00:07:43.443
So here I'm asking CrateDB to
select the first two entries in

00:07:43.443 --> 00:07:48.403
the zip codes array from the
details object in the field zip

00:07:48.403 --> 00:07:53.120
codes where the area number is
10, which is Norwood Park.

00:07:53.640 --> 00:07:57.444
Let's go ahead and run that and
you'll see that we get an array

00:07:57.444 --> 00:08:00.120
response containing those first
2 zip codes.

00:08:03.240 --> 00:08:07.613
Now you've seen how CrateDB can
store and query JSON data using

00:08:07.613 --> 00:08:09.800
the object and array data types.

00:08:10.600 --> 00:08:13.888
As the next step, I'd encourage
you to experiment with the

00:08:13.888 --> 00:08:17.289
different object policies and
try queries against the sample

00:08:17.289 --> 00:08:19.240
data set in your CrateDB
cluster.
